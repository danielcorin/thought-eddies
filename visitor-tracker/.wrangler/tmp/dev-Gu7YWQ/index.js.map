{
  "version": 3,
  "sources": ["../../../src/presence-tracker.ts", "../../../src/index.ts", "../../../node_modules/.pnpm/wrangler@4.40.2_@cloudflare+workers-types@4.20250927.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/.pnpm/wrangler@4.40.2_@cloudflare+workers-types@4.20250927.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-OWyGdG/middleware-insertion-facade.js", "../../../node_modules/.pnpm/wrangler@4.40.2_@cloudflare+workers-types@4.20250927.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-OWyGdG/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/.wrangler/tmp/dev-Gu7YWQ",
  "sourcesContent": ["import { DurableObject } from 'cloudflare:workers';\nimport type { ClientMessage, ServerMessage, SessionMetadata } from './types';\n\nconst HEARTBEAT_TIMEOUT_MS = 45000; // 45 seconds\nconst CLEANUP_INTERVAL_MS = 30000; // 30 seconds\n\nexport class PresenceTracker extends DurableObject {\n  private sessions: Map<WebSocket, SessionMetadata>;\n  private cleanupInterval: number | null;\n\n  constructor(ctx: DurableObjectState, env: unknown) {\n    super(ctx, env);\n    this.sessions = new Map();\n    this.cleanupInterval = null;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    // Handle WebSocket upgrade\n    if (request.headers.get('Upgrade') !== 'websocket') {\n      return new Response('Expected WebSocket', { status: 426 });\n    }\n\n    const url = new URL(request.url);\n    const pageUrl = url.searchParams.get('page');\n    const userId = url.searchParams.get('userId');\n\n    if (!pageUrl || !userId) {\n      return new Response('Missing page or userId parameter', { status: 400 });\n    }\n\n    const pair = new WebSocketPair();\n    const [client, server] = Object.values(pair);\n\n    // Accept the WebSocket with hibernation support\n    this.ctx.acceptWebSocket(server, [pageUrl]);\n\n    // Store session metadata\n    const metadata: SessionMetadata = {\n      userId,\n      pageUrl,\n      connectedAt: Date.now(),\n      lastHeartbeat: Date.now(),\n      isActive: true,\n    };\n    this.sessions.set(server, metadata);\n\n    // Start cleanup interval if not already running\n    if (!this.cleanupInterval) {\n      this.startCleanupInterval();\n    }\n\n    // Broadcast updated count to all clients\n    this.broadcastCount();\n\n    return new Response(null, {\n      status: 101,\n      webSocket: client,\n    });\n  }\n\n  async webSocketMessage(ws: WebSocket, message: string | ArrayBuffer): Promise<void> {\n    try {\n      const data: ClientMessage = JSON.parse(message.toString());\n      const session = this.sessions.get(ws);\n\n      if (!session) {\n        return;\n      }\n\n      switch (data.type) {\n        case 'heartbeat':\n          // Update last heartbeat timestamp\n          session.lastHeartbeat = Date.now();\n          session.isActive = true;\n          this.sessions.set(ws, session);\n\n          // Send current count back\n          this.sendCount(ws);\n          break;\n\n        case 'inactive':\n          // Mark session as inactive\n          session.isActive = false;\n          this.sessions.set(ws, session);\n\n          // Broadcast updated count immediately\n          this.broadcastCount();\n          break;\n\n        case 'active':\n          // Mark session as active\n          session.isActive = true;\n          session.lastHeartbeat = Date.now();\n          this.sessions.set(ws, session);\n\n          // Broadcast updated count immediately\n          this.broadcastCount();\n          break;\n\n        case 'ping':\n          // Respond to ping\n          this.sendMessage(ws, { type: 'pong', timestamp: Date.now() });\n          break;\n      }\n    } catch (error) {\n      console.error('Error handling WebSocket message:', error);\n    }\n  }\n\n  async webSocketClose(ws: WebSocket, code: number, reason: string, wasClean: boolean): Promise<void> {\n    // Remove session\n    this.sessions.delete(ws);\n\n    // Broadcast updated count\n    this.broadcastCount();\n\n    // Stop cleanup interval if no more sessions\n    if (this.sessions.size === 0 && this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n  }\n\n  async webSocketError(ws: WebSocket, error: unknown): Promise<void> {\n    console.error('WebSocket error:', error);\n    this.sessions.delete(ws);\n    this.broadcastCount();\n  }\n\n  private startCleanupInterval(): void {\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupStaleSessions();\n    }, CLEANUP_INTERVAL_MS) as unknown as number;\n  }\n\n  private cleanupStaleSessions(): void {\n    const now = Date.now();\n    let removed = false;\n\n    for (const [ws, session] of this.sessions.entries()) {\n      if (now - session.lastHeartbeat > HEARTBEAT_TIMEOUT_MS) {\n        // Close stale connection\n        try {\n          ws.close(1000, 'Heartbeat timeout');\n        } catch (error) {\n          console.error('Error closing stale connection:', error);\n        }\n        this.sessions.delete(ws);\n        removed = true;\n      }\n    }\n\n    if (removed) {\n      this.broadcastCount();\n    }\n  }\n\n  private getActiveCount(): number {\n    const now = Date.now();\n    let count = 0;\n\n    for (const [_, session] of this.sessions.entries()) {\n      // Count as active if: isActive flag is true AND last heartbeat is recent\n      if (session.isActive && now - session.lastHeartbeat < HEARTBEAT_TIMEOUT_MS) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private broadcastCount(): void {\n    const count = this.getActiveCount();\n    const message: ServerMessage = {\n      type: 'count',\n      count,\n      timestamp: Date.now(),\n    };\n\n    const messageStr = JSON.stringify(message);\n\n    for (const ws of this.sessions.keys()) {\n      try {\n        ws.send(messageStr);\n      } catch (error) {\n        console.error('Error broadcasting to client:', error);\n      }\n    }\n  }\n\n  private sendCount(ws: WebSocket): void {\n    const count = this.getActiveCount();\n    this.sendMessage(ws, {\n      type: 'count',\n      count,\n      timestamp: Date.now(),\n    });\n  }\n\n  private sendMessage(ws: WebSocket, message: ServerMessage): void {\n    try {\n      ws.send(JSON.stringify(message));\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n}", "import type { Env } from './types';\nimport { PresenceTracker } from './presence-tracker';\n\nexport { PresenceTracker };\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const url = new URL(request.url);\n\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Upgrade, Connection',\n    };\n\n    // Handle CORS preflight\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 204,\n        headers: corsHeaders,\n      });\n    }\n\n    // WebSocket endpoint\n    if (url.pathname === '/ws') {\n      const pageUrl = url.searchParams.get('page');\n      const userId = url.searchParams.get('userId');\n\n      if (!pageUrl || !userId) {\n        return new Response(\n          JSON.stringify({ error: 'Missing page or userId parameter' }),\n          {\n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders },\n          }\n        );\n      }\n\n      // Check for WebSocket upgrade\n      if (request.headers.get('Upgrade') !== 'websocket') {\n        return new Response(\n          JSON.stringify({ error: 'Expected WebSocket upgrade' }),\n          {\n            status: 426,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders },\n          }\n        );\n      }\n\n      // Get Durable Object ID for this page\n      // Using the page URL as the unique identifier ensures all visitors to the same page\n      // connect to the same Durable Object instance\n      const id = env.PRESENCE_TRACKER.idFromName(pageUrl);\n      const stub = env.PRESENCE_TRACKER.get(id);\n\n      // Forward request to Durable Object\n      return stub.fetch(request);\n    }\n\n    // Health check endpoint\n    if (url.pathname === '/health') {\n      return new Response(\n        JSON.stringify({ status: 'ok', timestamp: Date.now() }),\n        {\n          status: 200,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders },\n        }\n      );\n    }\n\n    // Default response\n    return new Response(\n      JSON.stringify({\n        message: 'Visitor Tracker API',\n        endpoints: {\n          websocket: '/ws?page=<pageUrl>&userId=<userId>',\n          health: '/health',\n        },\n      }),\n      {\n        status: 200,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      }\n    );\n  },\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/node_modules/.pnpm/wrangler@4.40.2_@cloudflare+workers-types@4.20250927.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/node_modules/.pnpm/wrangler@4.40.2_@cloudflare+workers-types@4.20250927.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/.wrangler/tmp/bundle-OWyGdG/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/node_modules/.pnpm/wrangler@4.40.2_@cloudflare+workers-types@4.20250927.0/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/.wrangler/tmp/bundle-OWyGdG/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/danielcorin/dev/lab/thought-eddies/visitor-tracker/.wrangler/tmp/bundle-OWyGdG/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AAAA,SAAS,qBAAqB;AAG9B,IAAM,uBAAuB;AAC7B,IAAM,sBAAsB;AAErB,IAAM,kBAAN,cAA8B,cAAc;AAAA,EANnD,OAMmD;AAAA;AAAA;AAAA,EAIjD,YAAY,KAAyB,KAAc;AACjD,UAAM,KAAK,GAAG;AACd,SAAK,WAAW,oBAAI,IAAI;AACxB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,MAAM,MAAM,SAAqC;AAE/C,QAAI,QAAQ,QAAQ,IAAI,SAAS,MAAM,aAAa;AAClD,aAAO,IAAI,SAAS,sBAAsB,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3D;AAEA,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,UAAU,IAAI,aAAa,IAAI,MAAM;AAC3C,UAAM,SAAS,IAAI,aAAa,IAAI,QAAQ;AAE5C,QAAI,CAAC,WAAW,CAAC,QAAQ;AACvB,aAAO,IAAI,SAAS,oCAAoC,EAAE,QAAQ,IAAI,CAAC;AAAA,IACzE;AAEA,UAAM,OAAO,IAAI,cAAc;AAC/B,UAAM,CAAC,QAAQ,MAAM,IAAI,OAAO,OAAO,IAAI;AAG3C,SAAK,IAAI,gBAAgB,QAAQ,CAAC,OAAO,CAAC;AAG1C,UAAM,WAA4B;AAAA,MAChC;AAAA,MACA;AAAA,MACA,aAAa,KAAK,IAAI;AAAA,MACtB,eAAe,KAAK,IAAI;AAAA,MACxB,UAAU;AAAA,IACZ;AACA,SAAK,SAAS,IAAI,QAAQ,QAAQ;AAGlC,QAAI,CAAC,KAAK,iBAAiB;AACzB,WAAK,qBAAqB;AAAA,IAC5B;AAGA,SAAK,eAAe;AAEpB,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,QAAQ;AAAA,MACR,WAAW;AAAA,IACb,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,iBAAiB,IAAe,SAA8C;AAClF,QAAI;AACF,YAAM,OAAsB,KAAK,MAAM,QAAQ,SAAS,CAAC;AACzD,YAAM,UAAU,KAAK,SAAS,IAAI,EAAE;AAEpC,UAAI,CAAC,SAAS;AACZ;AAAA,MACF;AAEA,cAAQ,KAAK,MAAM;AAAA,QACjB,KAAK;AAEH,kBAAQ,gBAAgB,KAAK,IAAI;AACjC,kBAAQ,WAAW;AACnB,eAAK,SAAS,IAAI,IAAI,OAAO;AAG7B,eAAK,UAAU,EAAE;AACjB;AAAA,QAEF,KAAK;AAEH,kBAAQ,WAAW;AACnB,eAAK,SAAS,IAAI,IAAI,OAAO;AAG7B,eAAK,eAAe;AACpB;AAAA,QAEF,KAAK;AAEH,kBAAQ,WAAW;AACnB,kBAAQ,gBAAgB,KAAK,IAAI;AACjC,eAAK,SAAS,IAAI,IAAI,OAAO;AAG7B,eAAK,eAAe;AACpB;AAAA,QAEF,KAAK;AAEH,eAAK,YAAY,IAAI,EAAE,MAAM,QAAQ,WAAW,KAAK,IAAI,EAAE,CAAC;AAC5D;AAAA,MACJ;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,qCAAqC,KAAK;AAAA,IAC1D;AAAA,EACF;AAAA,EAEA,MAAM,eAAe,IAAe,MAAc,QAAgB,UAAkC;AAElG,SAAK,SAAS,OAAO,EAAE;AAGvB,SAAK,eAAe;AAGpB,QAAI,KAAK,SAAS,SAAS,KAAK,KAAK,iBAAiB;AACpD,oBAAc,KAAK,eAAe;AAClC,WAAK,kBAAkB;AAAA,IACzB;AAAA,EACF;AAAA,EAEA,MAAM,eAAe,IAAe,OAA+B;AACjE,YAAQ,MAAM,oBAAoB,KAAK;AACvC,SAAK,SAAS,OAAO,EAAE;AACvB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEQ,uBAA6B;AACnC,SAAK,kBAAkB,YAAY,MAAM;AACvC,WAAK,qBAAqB;AAAA,IAC5B,GAAG,mBAAmB;AAAA,EACxB;AAAA,EAEQ,uBAA6B;AACnC,UAAM,MAAM,KAAK,IAAI;AACrB,QAAI,UAAU;AAEd,eAAW,CAAC,IAAI,OAAO,KAAK,KAAK,SAAS,QAAQ,GAAG;AACnD,UAAI,MAAM,QAAQ,gBAAgB,sBAAsB;AAEtD,YAAI;AACF,aAAG,MAAM,KAAM,mBAAmB;AAAA,QACpC,SAAS,OAAO;AACd,kBAAQ,MAAM,mCAAmC,KAAK;AAAA,QACxD;AACA,aAAK,SAAS,OAAO,EAAE;AACvB,kBAAU;AAAA,MACZ;AAAA,IACF;AAEA,QAAI,SAAS;AACX,WAAK,eAAe;AAAA,IACtB;AAAA,EACF;AAAA,EAEQ,iBAAyB;AAC/B,UAAM,MAAM,KAAK,IAAI;AACrB,QAAI,QAAQ;AAEZ,eAAW,CAAC,GAAG,OAAO,KAAK,KAAK,SAAS,QAAQ,GAAG;AAElD,UAAI,QAAQ,YAAY,MAAM,QAAQ,gBAAgB,sBAAsB;AAC1E;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,iBAAuB;AAC7B,UAAM,QAAQ,KAAK,eAAe;AAClC,UAAM,UAAyB;AAAA,MAC7B,MAAM;AAAA,MACN;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,IACtB;AAEA,UAAM,aAAa,KAAK,UAAU,OAAO;AAEzC,eAAW,MAAM,KAAK,SAAS,KAAK,GAAG;AACrC,UAAI;AACF,WAAG,KAAK,UAAU;AAAA,MACpB,SAAS,OAAO;AACd,gBAAQ,MAAM,iCAAiC,KAAK;AAAA,MACtD;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,UAAU,IAAqB;AACrC,UAAM,QAAQ,KAAK,eAAe;AAClC,SAAK,YAAY,IAAI;AAAA,MACnB,MAAM;AAAA,MACN;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEQ,YAAY,IAAe,SAA8B;AAC/D,QAAI;AACF,SAAG,KAAK,KAAK,UAAU,OAAO,CAAC;AAAA,IACjC,SAAS,OAAO;AACd,cAAQ,MAAM,0BAA0B,KAAK;AAAA,IAC/C;AAAA,EACF;AACF;;;ACzMA,IAAO,cAAQ;AAAA,EACb,MAAM,MAAM,SAAkB,KAAU,KAA0C;AAChF,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAG/B,UAAM,cAAc;AAAA,MAClB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IAClC;AAGA,QAAI,QAAQ,WAAW,WAAW;AAChC,aAAO,IAAI,SAAS,MAAM;AAAA,QACxB,QAAQ;AAAA,QACR,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAGA,QAAI,IAAI,aAAa,OAAO;AAC1B,YAAM,UAAU,IAAI,aAAa,IAAI,MAAM;AAC3C,YAAM,SAAS,IAAI,aAAa,IAAI,QAAQ;AAE5C,UAAI,CAAC,WAAW,CAAC,QAAQ;AACvB,eAAO,IAAI;AAAA,UACT,KAAK,UAAU,EAAE,OAAO,mCAAmC,CAAC;AAAA,UAC5D;AAAA,YACE,QAAQ;AAAA,YACR,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,UAChE;AAAA,QACF;AAAA,MACF;AAGA,UAAI,QAAQ,QAAQ,IAAI,SAAS,MAAM,aAAa;AAClD,eAAO,IAAI;AAAA,UACT,KAAK,UAAU,EAAE,OAAO,6BAA6B,CAAC;AAAA,UACtD;AAAA,YACE,QAAQ;AAAA,YACR,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,UAChE;AAAA,QACF;AAAA,MACF;AAKA,YAAM,KAAK,IAAI,iBAAiB,WAAW,OAAO;AAClD,YAAM,OAAO,IAAI,iBAAiB,IAAI,EAAE;AAGxC,aAAO,KAAK,MAAM,OAAO;AAAA,IAC3B;AAGA,QAAI,IAAI,aAAa,WAAW;AAC9B,aAAO,IAAI;AAAA,QACT,KAAK,UAAU,EAAE,QAAQ,MAAM,WAAW,KAAK,IAAI,EAAE,CAAC;AAAA,QACtD;AAAA,UACE,QAAQ;AAAA,UACR,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,QAChE;AAAA,MACF;AAAA,IACF;AAGA,WAAO,IAAI;AAAA,MACT,KAAK,UAAU;AAAA,QACb,SAAS;AAAA,QACT,WAAW;AAAA,UACT,WAAW;AAAA,UACX,QAAQ;AAAA,QACV;AAAA,MACF,CAAC;AAAA,MACD;AAAA,QACE,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,oBAAoB,GAAG,YAAY;AAAA,MAChE;AAAA,IACF;AAAA,EACF;AACF;;;ACpFA,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAG;AACX,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACRf,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAQ;AAChB,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;ACzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;ACcnB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAM,gCAA8D;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EArBD,OAYoE;AAAA;AAAA;AAAA,EAC1D;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,kCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,wBACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B,GAXyE;AAAA,IAazE,cAA0B,wBAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD,GAT0B;AAAA,IAW1B,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": []
}
