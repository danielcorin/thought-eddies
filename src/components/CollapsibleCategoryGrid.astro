---
interface CategoryItem {
  name: string;
  count: number;
}

interface Props {
  items: CategoryItem[];
  baseUrl: string;
  title?: string;
  defaultCollapsed?: boolean;
}

const { items, baseUrl, title, defaultCollapsed = true } = Astro.props;
---

<div class="categories" data-default-collapsed={defaultCollapsed}>
  {title && (
    <button
      class="category-header"
      aria-expanded={!defaultCollapsed}
      aria-controls="category-list"
    >
      <h3>{title}</h3>
      <span class="toggle-icon">{defaultCollapsed ? '▶' : '▼'}</span>
    </button>
  )}
  <div id="category-list" class="category-list" style={defaultCollapsed ? 'display: none;' : ''}>
    {items.map((item) => (
      <a
        href={`${baseUrl}/${encodeURIComponent(item.name)}`}
        class="category-link"
      >
        <span class="category-name">{item.name}</span>
        <span class="category-count">{item.count}</span>
      </a>
    ))}
  </div>
</div>

<style>
  .categories {
    margin-bottom: var(--spacing-xl);
    padding: var(--spacing-lg);
    background: var(--color-bg-code);
    border-radius: 0.5rem;
  }

  .category-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 0;
    background: none;
    border: none;
    cursor: pointer;
    text-align: left;
    color: inherit;
    font: inherit;
  }

  .category-header h3 {
    margin: 0;
    font-size: var(--text-lg);
  }

  .toggle-icon {
    font-size: 0.875rem;
    color: var(--color-ink-light);
    transition: transform 0.2s;
  }

  .category-list {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
    margin-top: var(--spacing-md);
  }

  .category-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.25rem 0.75rem;
    background: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    text-decoration: none;
    color: var(--color-ink);
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    transition: all 0.2s;
  }

  .category-link:hover {
    border-color: var(--color-accent);
    color: var(--color-accent);
  }

  .category-count {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 1.5rem;
    height: 1.5rem;
    padding: 0 0.375rem;
    background: var(--color-bg-code);
    border-radius: 9999px;
    font-size: var(--text-xs);
    font-weight: 500;
    color: var(--color-ink-light);
  }

  .category-link:hover .category-count {
    background: var(--color-accent);
    color: var(--color-bg);
  }
</style>

<script>
  const categories = document.querySelector('.categories') as HTMLElement;
  const header = categories?.querySelector('.category-header') as HTMLButtonElement;
  const list = categories?.querySelector('.category-list') as HTMLElement;
  const toggleIcon = header?.querySelector('.toggle-icon') as HTMLElement;
  
  if (header && list && toggleIcon) {
    const defaultCollapsed = categories.dataset.defaultCollapsed === 'true';
    let isCollapsed = defaultCollapsed;
    
    header.addEventListener('click', () => {
      isCollapsed = !isCollapsed;
      
      if (isCollapsed) {
        list.style.display = 'none';
        toggleIcon.textContent = '▶';
        header.setAttribute('aria-expanded', 'false');
      } else {
        list.style.display = 'flex';
        toggleIcon.textContent = '▼';
        header.setAttribute('aria-expanded', 'true');
      }
    });
  }
</script>