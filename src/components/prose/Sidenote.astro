---
import { marked } from 'marked';

interface Props {
  content: string;
}

const { content } = Astro.props;
const id = Math.random().toString(36).substring(7);
const htmlContent = marked.parseInline(content);
---

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle toggle click to open/close sidenote
    document.querySelectorAll('.sidenote-toggle').forEach((toggle) => {
      toggle.addEventListener('click', (e) => {
        e.preventDefault();
        const checkbox = toggle.nextElementSibling as HTMLInputElement;
        checkbox.checked = !checkbox.checked;
        
        if (checkbox.checked) {
          // Focus the sidenote content when opened
          const content = checkbox.nextElementSibling as HTMLElement;
          content.setAttribute('tabindex', '-1');
          content.focus();
        }
      });
    });
    
    // Handle blur to close sidenotes
    document.addEventListener('focusout', (e) => {
      setTimeout(() => {
        const activeElement = document.activeElement;
        const sidenoteContent = (e.target as HTMLElement).closest('.sidenote-content');
        
        if (sidenoteContent && !sidenoteContent.contains(activeElement)) {
          // Lost focus from sidenote content
          const checkbox = sidenoteContent.previousElementSibling as HTMLInputElement;
          checkbox.checked = false;
        }
      }, 0);
    });
    
    // Handle escape key to close sidenotes
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        document.querySelectorAll('.sidenote-checkbox:checked').forEach((checkbox) => {
          (checkbox as HTMLInputElement).checked = false;
        });
      }
    });
  });
</script>

<span class="sidenote-wrapper">
  <label 
    for={`sidenote-toggle-${id}`} 
    class="sidenote-toggle"
    tabindex="0"
    role="button"
    aria-label={`Toggle sidenote: ${content.substring(0, 50)}...`}
  ><span class="sidenote-anchor"><slot /></span></label>
  <input 
    type="checkbox" 
    id={`sidenote-toggle-${id}`} 
    class="sidenote-checkbox"
    aria-hidden="true"
  />
  <span class="sidenote-content" role="note" set:html={htmlContent} />
</span>

<style>
  .sidenote-wrapper {
    position: relative;
  }

  .sidenote-toggle {
    cursor: pointer;
  }

  .sidenote-anchor {
    color: var(--color-link);
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 2px;
    transition: color var(--transition-speed) ease;
  }

  .sidenote-toggle:hover .sidenote-anchor {
    color: var(--color-ink);
    text-decoration-style: solid;
  }

  .sidenote-toggle:focus {
    outline: none;
  }

  .sidenote-checkbox {
    display: none;
  }

  .sidenote-content {
    position: absolute;
    left: 50%;
    top: 100%;
    width: 250px;
    margin-top: 0.5rem;
    padding: var(--spacing-sm);
    background: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    font-size: var(--text-xs);
    line-height: 1.5;
    opacity: 0;
    visibility: hidden;
    transform: translateX(-50%) translateY(10px);
    transition: 
      opacity var(--transition-speed) ease,
      visibility var(--transition-speed) ease,
      transform var(--transition-speed) ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    z-index: 100;
    outline: none;
  }
  
  .sidenote-content:focus {
    outline: none;
  }

  .sidenote-checkbox:checked ~ .sidenote-content,
  .sidenote-toggle:focus ~ .sidenote-content {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
  }


  /* Mobile styles - show below content */
  @media (max-width: 768px) {
    .sidenote-content {
      position: absolute;
      left: calc(-1 * var(--spacing-md));
      right: calc(-1 * var(--spacing-md));
      top: 100%;
      bottom: auto;
      width: calc(100vw - 2 * var(--spacing-md));
      transform: translateY(10px);
      margin-top: 0.5rem;
      border-radius: 8px;
      padding: var(--spacing-md);
      font-size: var(--text-sm);
    }

    .sidenote-checkbox:checked ~ .sidenote-content,
    .sidenote-toggle:focus ~ .sidenote-content {
      transform: translateY(0);
    }
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .sidenote-content {
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }
  }

  /* Ensure consistent font sizes for all content */
  .sidenote-content :global(code),
  .sidenote-content :global(pre) {
    font-size: inherit;
  }

  .sidenote-content :global(pre) {
    margin: 0.5em 0;
    padding: 0.5em;
    overflow-x: auto;
  }

  .sidenote-content :global(p) {
    margin: 0;
  }

  .sidenote-content :global(p + p) {
    margin-top: 0.5em;
  }

</style>