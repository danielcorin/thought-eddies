---
import { Markdown } from "@astropub/md";

interface ContentItem {
  type: "text" | "image_url";
  text?: string;
  image_url?: {
    url: string;
  };
}

interface Message {
  role: "system" | "user" | "assistant" | "function";
  content: string | ContentItem[];
  name?: string;
  function_call?: {
    name: string;
    arguments: string;
  };
}

interface Props {
  messages: Message[];
  model?: string;
}

const { messages, model } = Astro.props;

function getContent(content: string | ContentItem[]): {
  text: string;
  images: string[];
} {
  if (typeof content === "string") return { text: content, images: [] };

  const images: string[] = [];
  const text = content
    .map((item) => {
      if (item.type === "image_url" && item.image_url) {
        images.push(item.image_url.url);
        return "";
      }
      return item.text || "";
    })
    .join("");

  return { text, images };
}
---

<section class="chat-section">
  <div class="chat-container">
    {
      messages.map((message) => (
        <div class="message-container">
          {message.role === "user" && (
            <div class="message user">
              <div class="message-content">
                <div class="user-label">User</div>
                <div class="bubble user-bubble">
                  <Markdown of={getContent(message.content).text} />
                  {getContent(message.content).images.map((url, index) => (
                    <img src={url} alt={`Image ${index + 1} from user message`} class="message-image" />
                  ))}
                </div>
              </div>
            </div>
          )}
          {message.role === "assistant" && (
            <div class="message assistant">
              <div class="message-content">
                {model && <div class="model-label">{model}</div>}
                <div class="bubble assistant-bubble">
                  <Markdown of={getContent(message.content).text} />
                  {getContent(message.content).images.map((url, index) => (
                    <img src={url} alt={`Image ${index + 1} from ${model || 'assistant'} response`} class="message-image" />
                  ))}
                </div>
              </div>
            </div>
          )}
          {message.role === "system" && (
            <div class="message system">
              <div class="bubble system-bubble">
                <Markdown of={getContent(message.content).text} />
                {getContent(message.content).images.map((url, index) => (
                  <img src={url} alt={`Image ${index + 1} from system message`} class="message-image" />
                ))}
              </div>
            </div>
          )}
        </div>
      ))
    }
  </div>
</section>

<style>
  .chat-section {
    --transition-speed: 300ms;
  }

  .chat-container {
    --bubble-radius: 1rem;
    --bubble-padding: 0.75rem 1rem;
    --bubble-max-width: 90%;

    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    padding: var(--spacing-md);
    margin: 0 auto;
    font-family: var(--font-prose);
  }

  .message-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .message {
    display: flex;
  }

  .message.user {
    justify-content: flex-end;
  }
  .message.assistant {
    justify-content: flex-start;
  }
  .message.system {
    justify-content: center;
  }

  .message-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    max-width: var(--bubble-max-width);
    min-width: 0;
  }

  .message.user .message-content {
    align-items: flex-end;
  }

  .bubble {
    padding: var(--bubble-padding);
    border-radius: var(--bubble-radius);
    max-width: var(--bubble-max-width);
    font-size: var(--text-sm);
    word-wrap: break-word;
    overflow-wrap: break-word;
    min-width: 0;
    display: inline-block;
  }

  .user-bubble {
    background: var(--color-ink-light);
    color: var(--color-bg);
    border-bottom-right-radius: 0;
  }

  .assistant-bubble {
    background: var(--color-bg-code);
    color: var(--color-ink);
    border-bottom-left-radius: 0;
  }

  .system-bubble {
    background: var(--color-bg-code);
    color: var(--color-ink-light);
    font-style: italic;
  }

  .model-label,
  .user-label {
    font-size: var(--text-xs);
    color: var(--color-ink-light);
    margin-left: 0.5rem;
  }

  .user-label {
    text-align: right;
    margin-bottom: 0.25rem;
  }

  .message-image {
    margin-top: 0.5rem;
    border-radius: 0.5rem;
    max-width: 100%;
    max-height: 250px;
    object-fit: contain;
  }

  /* Ensure text colors respect dark mode */
  .user-bubble :global(p),
  .user-bubble :global(li),
  .user-bubble :global(h1),
  .user-bubble :global(h2),
  .user-bubble :global(h3),
  .user-bubble :global(h4),
  .user-bubble :global(h5),
  .user-bubble :global(h6) {
    color: var(--color-bg);
  }

  .assistant-bubble :global(p),
  .assistant-bubble :global(li),
  .assistant-bubble :global(h1),
  .assistant-bubble :global(h2),
  .assistant-bubble :global(h3),
  .assistant-bubble :global(h4),
  .assistant-bubble :global(h5),
  .assistant-bubble :global(h6) {
    color: var(--color-ink);
  }

  .system-bubble :global(p),
  .system-bubble :global(li),
  .system-bubble :global(h1),
  .system-bubble :global(h2),
  .system-bubble :global(h3),
  .system-bubble :global(h4),
  .system-bubble :global(h5),
  .system-bubble :global(h6) {
    color: var(--color-ink-light);
  }

  /* Ensure links in bubbles have appropriate colors */
  .user-bubble :global(a) {
    color: var(--color-bg);
    text-decoration: underline;
  }

  .assistant-bubble :global(a) {
    color: var(--color-link);
    text-decoration: underline;
  }

  .system-bubble :global(a) {
    color: var(--color-ink-light);
    text-decoration: underline;
  }

  /* Inline code styling within bubbles */
  .user-bubble :global(code:not(pre code)) {
    background-color: rgba(255, 255, 255, 0.2);
    color: var(--color-bg);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }

  .assistant-bubble :global(code:not(pre code)) {
    background-color: rgba(0, 0, 0, 0.08);
    color: var(--color-ink);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }

  /* Dark mode adjustments for inline code */
  :global(.dark) .assistant-bubble :global(code:not(pre code)) {
    background-color: rgba(255, 255, 255, 0.1);
  }

  /* Code block styling within bubbles */
  .bubble :global(pre) {
    margin: 0.5rem 0;
    overflow-x: auto;
    max-width: 100%;
    min-width: 0;
  }

  .bubble :global(pre code) {
    display: block;
    white-space: pre;
    word-break: normal;
    overflow-wrap: normal;
    min-width: 0;
  }

  /* Mobile styles */
  @media (max-width: 640px) {
    .chat-container {
      --bubble-max-width: 100%;
    }

    .message.user,
    .message.assistant,
    .message.system {
      justify-content: stretch;
    }

    .bubble {
      width: 100%;
      display: block;
    }

    .message-content {
      max-width: 100%;
    }

    .message.user .message-content {
      align-items: stretch;
    }

    .user-bubble {
      border-radius: var(--bubble-radius);
      border-bottom-right-radius: 0;
    }

    .assistant-bubble {
      border-radius: var(--bubble-radius);
      border-bottom-left-radius: 0;
    }
  }
</style>
