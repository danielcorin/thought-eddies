---
import "@styles/base.css";
import { Icon } from "astro-icon/components";

interface Props {
    selected?: string;
}

const { selected } = Astro.props;
---

<nav class="site-nav">
    {
        ["", "posts"].map((item) => (
            <a
                href={`/${item === "" ? "" : item}`}
                class={
                    selected === item || (item === "" && selected === "home")
                        ? "nav-link selected"
                        : "nav-link"
                }
            >
                <span class="nav-item">
                    <Icon
                        name={`ph:${item === "" ? "house" : item === "logs" ? "scroll" : "note"}`}
                        class="inline-icon"
                    />
                    <span class="nav-text">
                        {item === ""
                            ? "Home"
                            : item.charAt(0).toUpperCase() + item.slice(1)}
                    </span>
                </span>
            </a>
        ))
    }
    <div class="nav-icons-group" style="margin-left: auto;">
        <a href="/rss.xml" class="nav-link nav-icon-link" title="RSS Feed">
            <span class="nav-item">
                <Icon name="ph:rss" class="inline-icon nav-icon" />
            </span>
        </a>
        <button id="theme-toggle" class="nav-link nav-icon-link">
            <span class="nav-item">
                <span id="sun-wrapper" class="sun-wrapper">
                    <Icon name="ph:sun" class="inline-icon nav-icon" />
                </span>
                <span id="moon-wrapper" class="moon-wrapper hidden">
                    <Icon name="ph:moon" class="inline-icon nav-icon" />
                </span>
            </span>
        </button>
    </div>
</nav>

<script is:inline>
    // Theme button functionality using global utilities
    (function () {
        const themeToggle = document.getElementById("theme-toggle");
        const sunWrapper = document.getElementById("sun-wrapper");
        const moonWrapper = document.getElementById("moon-wrapper");

        function updateIconsForTheme() {
            if (!sunWrapper || !moonWrapper) return;

            const currentTheme = window.themeUtils
                ? window.themeUtils.getCurrentTheme()
                : document.documentElement.className;
            const isDark = currentTheme === "dark";

            sunWrapper.classList.toggle("hidden", isDark);
            moonWrapper.classList.toggle("hidden", !isDark);
        }

        // Initialize icons when DOM is ready
        if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", updateIconsForTheme);
        } else {
            updateIconsForTheme();
        }

        // Listen for theme changes from other sources
        window.addEventListener("themeChanged", updateIconsForTheme);

        // Handle click events
        if (themeToggle) {
            themeToggle.addEventListener("click", () => {
                if (window.themeUtils) {
                    window.themeUtils.toggleTheme();
                }
                updateIconsForTheme();
            });
        }
    })();
</script>

<style>
    .nav-icon-link {
        display: inline-flex;
        align-items: center;
        vertical-align: middle;
    }
    
    .nav-icon-link .nav-item {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 24px;
    }
    
    .nav-icon {
        vertical-align: middle !important;
        margin: 0;
        display: block;
    }
    
    /* Ensure both icons have the same size */
    .nav-icon-link svg {
        width: 1em;
        height: 1em;
    }
    
    /* Group icons together with controlled spacing */
    .nav-icons-group {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
</style>
