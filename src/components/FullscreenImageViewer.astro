<div
  id="fullscreen-image-viewer"
  class="fixed inset-0 z-[1001] flex items-center justify-center bg-black bg-opacity-90 p-4 hidden"
>
  <div class="relative w-full h-full flex items-center justify-center">
    <button
      id="close-fullscreen-btn"
      class="absolute top-4 right-4 z-10 w-8 h-8 bg-white bg-opacity-80 hover:bg-opacity-100 rounded-full flex items-center justify-center text-black font-bold transition-all duration-200"
      aria-label="Close fullscreen image"
    >
      âœ•
    </button>
    <img
      id="fullscreen-image"
      alt=""
      class="max-w-[90vw] max-h-[90vh] object-contain"
    />
  </div>
</div>

<script>
  const viewer = document.getElementById('fullscreen-image-viewer');
  const image = document.getElementById('fullscreen-image') as HTMLImageElement;
  const closeBtn = document.getElementById('close-fullscreen-btn');

  function openFullscreen(src: string, alt: string) {
    if (!viewer || !image) return;
    
    image.src = src;
    image.alt = alt;
    viewer.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  function closeFullscreen() {
    if (!viewer) return;
    
    viewer.classList.add('hidden');
    document.body.style.overflow = 'unset';
  }

  function handleEscape(e: KeyboardEvent) {
    if (e.key === 'Escape') {
      closeFullscreen();
    }
  }

  // Close on background click
  viewer?.addEventListener('click', (e) => {
    if (e.target === viewer) {
      closeFullscreen();
    }
  });

  // Close on X button click
  closeBtn?.addEventListener('click', closeFullscreen);

  // Close on escape key
  document.addEventListener('keydown', handleEscape);

  // Prevent image click from closing
  image?.addEventListener('click', (e) => {
    e.stopPropagation();
  });

  // Export function to global scope so other components can use it
  (window as any).openFullscreenImage = openFullscreen;
</script>
