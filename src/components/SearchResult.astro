---
import Tag from './Tag.astro';
import TypeLabel from './TypeLabel.astro';
import type { CollectionEntry } from 'astro:content';

interface Props {
  type: 'post' | 'log';
  item: CollectionEntry<'posts'> | CollectionEntry<'logs'>;
  url: string;
  isSelected: boolean;
  onMouseEnter: () => void;
}

const { type, item, url, isSelected, onMouseEnter } = Astro.props;
const tags = 'tags' in item.data ? item.data.tags : [];

const formatDate = (item: CollectionEntry<'posts'> | CollectionEntry<'logs'>) => {
  if ('publishedAt' in item.data && item.data.publishedAt) {
    return new Date(item.data.publishedAt).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }
  if ('date' in item.data) {
    return new Date(item.data.date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }
  if ('createdAt' in item.data) {
    return new Date(item.data.createdAt).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }
  return '';
};
---

<a
  href={url}
  class={`search-result ${isSelected ? 'selected' : ''}`}
  data-mouse-enter
>
  <div class="result-content">
    <div class="result-main">
      <h3 class="result-title">
        {item.data.title}
      </h3>
      {'description' in item.data && item.data.description && (
        <p class="result-description">
          {item.data.description}
        </p>
      )}
      {tags && tags.length > 0 && (
        <div class="result-tags">
          {tags.slice(0, 3).map((tag) => (
            <Tag tag={tag} />
          ))}
          {tags.length > 3 && (
            <span class="more-tags">
              +{tags.length - 3}
            </span>
          )}
        </div>
      )}
    </div>
    <div class="result-meta">
      <TypeLabel type={type} />
      <p class="result-date">
        {formatDate(item)}
      </p>
    </div>
  </div>
</a>

<style>
  .search-result {
    display: block;
    padding: var(--spacing-md);
    text-decoration: none;
    color: inherit;
    transition: background-color 0.2s;
  }

  .search-result:hover,
  .search-result.selected {
    background: var(--color-bg-code);
  }

  .result-content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
  }

  .result-main {
    flex: 1;
    min-width: 0;
  }

  .result-title {
    font-size: var(--text-sm);
    font-weight: 500;
    color: var(--color-ink);
    margin: 0 0 var(--spacing-xs);
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .result-description {
    font-size: var(--text-xs);
    color: var(--color-ink-light);
    margin: 0 0 var(--spacing-sm);
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .result-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    margin-top: var(--spacing-sm);
  }

  .more-tags {
    font-size: var(--text-xs);
    color: var(--color-ink-light);
    padding: 0.125rem 0;
  }

  .result-meta {
    margin-left: var(--spacing-lg);
    flex-shrink: 0;
    text-align: right;
  }

  .result-date {
    font-size: var(--text-xs);
    color: var(--color-ink-light);
    margin: var(--spacing-xs) 0 0;
  }
</style>

<script>
  // Handle mouse enter event
  document.querySelectorAll('[data-mouse-enter]').forEach(el => {
    el.addEventListener('mouseenter', () => {
      const event = new CustomEvent('search-result-hover', {
        detail: { element: el }
      });
      window.dispatchEvent(event);
    });
  });
</script>