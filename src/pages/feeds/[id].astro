---
import Navigation from '@components/layout/Navigation.astro';
import Layout from '@layouts/Layout.astro';
import RSSFeedLinksClient from '@components/RSSFeedLinksClient.tsx';
import { getCollection, render, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const feeds = await getCollection('feeds');
  return feeds.map((feed) => ({
    params: { id: feed.id },
    props: { feed },
  }));
}

type Props = {
  feed: CollectionEntry<'feeds'>;
};

const { feed } = Astro.props;
const { Content } = await render(feed);
const { title, feed_url: feedUrl } = feed.data;
---

<Layout title={title} description={feed.body} ogImage="/og.png">
  <Navigation selected="feeds" />
  <main>
    <h1 class="page-title">{title}</h1>
    <div class="page-description">
      <Content />
    </div>
    <RSSFeedLinksClient client:load feedUrl={feedUrl} title="" limit={30} />
  </main>
</Layout>

<style>
  main {
    margin-bottom: 0;
  }

  .page-description {
    font-size: var(--text-lg);
    color: var(--color-ink-light);
    margin-bottom: var(--spacing-xl);
  }

  .page-description p {
    margin: 0;
  }

  /* RSS Feed component styles */
  :global(.rss-feed-links) {
    margin-top: var(--spacing-xl);
  }

  :global(.rss-feed-links h2) {
    font-size: var(--text-2xl);
    margin-bottom: var(--spacing-lg);
    color: var(--color-ink);
    font-weight: 600;
  }

  :global(.feed-list) {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  :global(.feed-item) {
    display: block;
    padding: var(--spacing-md);
    background: var(--color-bg-code);
    border-radius: 0.5rem;
  }


  :global(.feed-header) {
    margin-bottom: var(--spacing-sm);
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
  }

  :global(.feed-date) {
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    color: var(--color-ink-light);
  }

  :global(.feed-domain) {
    font-size: var(--text-sm);
    color: var(--color-ink-light);
    padding: 0.125rem 0.5rem;
    background: var(--color-bg);
    border-radius: 0.25rem;
  }

  :global(.feed-content) {
    margin-left: 0;
  }

  :global(.feed-title) {
    margin: 0;
    font-size: var(--text-lg);
    line-height: 1.3;
  }

  :global(.feed-title a) {
    color: var(--color-ink);
    text-decoration: none;
    transition: opacity 0.2s;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    font-size: var(--text-base);
  }

  :global(.feed-title a:hover) {
    opacity: 0.8;
    color: var(--color-accent);
  }

  :global(.external-icon) {
    width: 1rem;
    height: 1rem;
    opacity: 0.6;
    flex-shrink: 0;
  }

  /* Loading/Error states */
  :global(.loading-container) {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: calc(var(--spacing-xl) * 2) 0;
    gap: var(--spacing-md);
  }

  :global(.loading-spinner) {
    width: 2.5rem;
    height: 2.5rem;
    border: 3px solid var(--color-bg-code);
    border-top-color: var(--color-accent);
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
  }

  :global(.loading-text) {
    font-size: var(--text-base);
    color: var(--color-ink-light);
    margin: 0;
  }

  :global(.error-message),
  :global(.no-items) {
    padding: var(--spacing-lg);
    text-align: center;
    color: var(--color-ink-light);
  }

  :global(.error-message) {
    background: var(--color-bg-code);
    border-radius: 0.5rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @media (max-width: 640px) {
    :global(.feed-item) {
      padding: var(--spacing-sm);
    }
    :global(.feed-title),
    :global(.rss-feed-links h2) {
      font-size: var(--text-base);
    }
    :global(.feed-header) {
      flex-wrap: wrap;
    }
  }
</style>
