---
import Navigation from "@components/layout/Navigation.astro";
import Pagination from "@components/Pagination.astro";
import PostCard from "@components/PostCard.astro";
import YearNavigation from "@components/layout/YearNavigation.astro";
import Layout from "@layouts/Layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const posts = await getCollection("posts");
  const sortedPosts = posts
    .filter((post) => !post.data.draft && !post.id.includes("level"))
    .sort((a, b) => b.data.createdAt.valueOf() - a.data.createdAt.valueOf());

  // Use Astro's paginate function
  return paginate(sortedPosts, { pageSize: 10 });
};

const { page } = Astro.props as { page: any };


// Get all years with posts for navigation
const allPosts = await getCollection("posts");
const publishedPosts = allPosts.filter(
  (post) => !post.data.draft && !post.id.includes("level"),
);
const yearsWithPosts = [
  ...new Set(
    publishedPosts.map((post) => new Date(post.data.createdAt).getFullYear()),
  ),
].sort((a, b) => b - a);

const ogImage = `/posts/og.png`;
---

<Layout title="Posts" ogImage={ogImage} pageType="postsList">
  <Navigation selected="posts" />
  <main>
    <h1 class="page-title">Posts</h1>

    <div class="toc">
      {
        page.data.map((post: any) => (
          <PostCard post={post} variant="list" />
        ))
      }
    </div>

    {
      page.lastPage > 1 && (
        <div class="pagination-bottom">
          <Pagination
            currentPage={page.currentPage}
            lastPage={page.lastPage}
            prevUrl={page.url.prev}
            nextUrl={page.url.next}
            baseUrl="/posts"
          />
        </div>
      )
    }

    <YearNavigation years={yearsWithPosts} baseUrl="/posts" />
  </main>
</Layout>

<style>
  .pagination-bottom {
    margin-top: var(--spacing-xl);
  }
</style>
