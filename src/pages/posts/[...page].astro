---
import Navigation from "@components/layout/Navigation.astro";
import Pagination from "@components/Pagination.astro";
import Tag from "@components/Tag.astro";
import Layout from "@layouts/Layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const posts = await getCollection("posts");
  const sortedPosts = posts
    .filter((post) => !post.data.draft && !post.id.includes("level"))
    .sort((a, b) => b.data.createdAt.valueOf() - a.data.createdAt.valueOf());

  // Use Astro's paginate function
  return paginate(sortedPosts, { pageSize: 10 });
};

const { page } = Astro.props as { page: any };

// Helper function to extract clean preview text from MDX/Markdown content
function getContentPreview(body: string, maxLength: number = 300): string {
  if (!body) return "";

  // Remove all import statements (including multiline)
  let content = body.replace(
    /^import\s+[\s\S]*?from\s+['"][^'"]+['"];?\s*$/gm,
    "",
  );

  // Remove export statements
  content = content.replace(/^export\s+[\s\S]*?;\s*$/gm, "");

  // Remove JSX/MDX components (both self-closing and with children)
  content = content.replace(/<[A-Z][^>]*\/>/g, ""); // Self-closing
  content = content.replace(/<[A-Z][^>]*>[\s\S]*?<\/[A-Z][^>]*>/g, ""); // With children

  // Remove HTML comments
  content = content.replace(/<!--[\s\S]*?-->/g, "");

  // Remove code blocks
  content = content.replace(/```[\s\S]*?```/g, "");
  content = content.replace(/~~~[\s\S]*?~~~/g, "");

  // Remove inline code
  content = content.replace(/`[^`\n]+`/g, "");

  // Remove images
  content = content.replace(/!\[[^\]]*\]\([^)]+\)/g, "");

  // Convert links to just their text
  content = content.replace(/\[([^\]]+)\]\([^)]+\)/g, "$1");

  // Remove headings but keep their text
  content = content.replace(/^#{1,6}\s+(.+)$/gm, "$1");

  // Remove horizontal rules
  content = content.replace(/^[-*_]{3,}$/gm, "");

  // Remove blockquotes markers
  content = content.replace(/^>\s+/gm, "");

  // Remove list markers
  content = content.replace(/^\s*[-*+]\s+/gm, "");
  content = content.replace(/^\s*\d+\.\s+/gm, "");

  // Remove bold/italic markers
  content = content.replace(/\*{1,3}([^*]+)\*{1,3}/g, "$1");
  content = content.replace(/_{1,3}([^_]+)_{1,3}/g, "$1");

  // Clean up extra whitespace
  content = content.replace(/\n{3,}/g, "\n\n");
  content = content.replace(/^\s*\n/gm, "");

  // Get paragraphs and filter out short fragments
  const paragraphs = content
    .split(/\n\n+/)
    .map((p) => p.trim())
    .filter((p) => p.length > 20 && !p.match(/^\s*$/))
    .slice(0, 3); // Take first 3 paragraphs

  let preview = paragraphs.join(" ");

  // Final cleanup
  preview = preview.replace(/\s+/g, " ").trim();

  if (preview.length <= maxLength) {
    return preview;
  }

  // Truncate at word boundary
  const truncated = preview.substring(0, maxLength);
  const lastSpace = truncated.lastIndexOf(" ");
  return truncated.substring(0, lastSpace) + "...";
}

// Get all years with posts for navigation
const allPosts = await getCollection("posts");
const publishedPosts = allPosts.filter(
  (post) => !post.data.draft && !post.id.includes("level"),
);
const yearsWithPosts = [
  ...new Set(
    publishedPosts.map((post) => new Date(post.data.createdAt).getFullYear()),
  ),
].sort((a, b) => b - a);

const ogImage = `/posts/og.png`;
---

<Layout title="Posts" ogImage={ogImage}>
  <Navigation selected="posts" />
  <main>
    <h1 class="page-title">Posts</h1>

    {
      page.lastPage > 1 && (
        <Pagination
          currentPage={page.currentPage}
          lastPage={page.lastPage}
          prevUrl={page.url.prev}
          nextUrl={page.url.next}
          baseUrl="/posts"
        />
      )
    }

    <div class="toc">
      {
        page.data.map(async (post: any) => {
          const date = new Date(post.data.createdAt);
          const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}-${String(date.getDate()).padStart(2, "0")}`;
          const description = post.data.description || "";

          // Extract preview from raw content
          const contentPreview = getContentPreview(post.body || "");

          return (
            <article class="entry">
              <div class="entry-header">
                <time class="entry-date-mono">
                  <a href={`/posts/${post.id}`}>{formattedDate}</a>
                </time>
              </div>
              <div class="entry-content">
                <h2>
                  <a href={`/posts/${post.id}`}>{post.data.title}</a>
                </h2>
                {description && <p class="entry-description">{description}</p>}
                <p class="entry-preview">{contentPreview}</p>
                <div class="entry-footer">
                  <div class="tags">
                    {post.data.tags &&
                      post.data.tags.length > 0 &&
                      post.data.tags.map((tag: string) => <Tag tag={tag} />)}
                  </div>
                  <a href={`/posts/${post.id}`} class="read-more">
                    Read more â†’
                  </a>
                </div>
              </div>
            </article>
          );
        })
      }
    </div>

    {
      page.lastPage > 1 && (
        <div class="pagination-bottom">
          <Pagination
            currentPage={page.currentPage}
            lastPage={page.lastPage}
            prevUrl={page.url.prev}
            nextUrl={page.url.next}
            baseUrl="/posts"
          />
        </div>
      )
    }

    <nav class="year-navigation">
      <h2>Browse by year</h2>
      <div class="year-links">
        {
          yearsWithPosts.map((year) => (
            <a href={`/posts/${year}`} class="year-link">
              {year}
            </a>
          ))
        }
      </div>
    </nav>
  </main>
</Layout>

<style>
  /* Override toc article grid to be simpler for posts */
  .toc article {
    display: block;
    padding: var(--spacing-lg) var(--spacing-xl);
    background: var(--color-bg-code);
    border-radius: 0.5rem;
    margin-bottom: var(--spacing-lg);
  }

  .entry-header {
    margin-bottom: var(--spacing-md);
  }

  .entry-date-mono {
    font-family: var(--font-mono);
    font-size: var(--text-sm);
  }

  .entry-date-mono a {
    color: var(--color-ink-light);
    text-decoration: none;
    transition: opacity 0.2s;
  }

  .entry-date-mono a:hover {
    opacity: 0.8;
    color: var(--color-accent);
  }

  .entry-content {
    margin-left: 0;
  }

  .entry-content h2 {
    margin: 0 0 var(--spacing-md);
    font-size: var(--text-2xl);
    line-height: 1.3;
  }

  .entry-content h2 a {
    color: var(--color-ink);
    text-decoration: none;
    transition: opacity 0.2s;
  }

  .entry-content h2 a:hover {
    opacity: 0.8;
    color: var(--color-accent);
  }

  .entry-description {
    margin: 0 0 var(--spacing-md);
    font-size: var(--text-lg);
    line-height: 1.6;
    color: var(--color-ink);
    font-weight: 500;
  }

  .entry-preview {
    margin: 0 0 var(--spacing-md);
    font-size: var(--text-base);
    line-height: 1.7;
    color: var(--color-ink-light);
  }

  .entry-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-md);
    margin-top: var(--spacing-md);
  }

  .read-more {
    font-size: var(--text-sm);
    color: var(--color-accent);
    text-decoration: none;
    white-space: nowrap;
  }

  .read-more:hover {
    text-decoration: underline;
  }

  .tags {
    display: flex;
    gap: var(--spacing-sm);
    flex-wrap: wrap;
  }

  .pagination-bottom {
    margin-top: var(--spacing-xl);
  }

  .year-navigation {
    margin-top: var(--spacing-xl);
    padding-top: var(--spacing-lg);
    border-top: 1px solid var(--color-border);
  }

  .year-navigation h2 {
    font-size: var(--text-xl);
    margin-bottom: var(--spacing-md);
  }

  .year-links {
    display: flex;
    gap: var(--spacing-md);
    flex-wrap: wrap;
  }

  .year-link {
    padding: var(--spacing-sm) var(--spacing-md);
    background: var(--color-bg-code);
    border-radius: 0.25rem;
  }

  @media (max-width: 640px) {
    .toc article {
      padding: var(--spacing-md);
    }

    .entry-content h2 {
      font-size: var(--text-xl);
    }

    .entry-description {
      font-size: var(--text-base);
    }

    .entry-footer {
      flex-wrap: wrap;
    }
  }
</style>
