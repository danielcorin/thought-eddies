---
import Navigation from "@components/layout/Navigation.astro";
import Pagination from "@components/Pagination.astro";
import Tag from "@components/Tag.astro";
import YearNavigation from "@components/layout/YearNavigation.astro";
import Layout from "@layouts/Layout.astro";
import { getContentPreview } from "@utils/text";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const logs = await getCollection("logs");
  const sortedLogs = logs
    .filter((log) => !log.data.draft)
    .sort((a, b) => {
      return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
    });

  // Use Astro's paginate function
  return paginate(sortedLogs, { pageSize: 10 });
};

const { page } = Astro.props as { page: any };


// Get all years with logs for navigation
const allLogs = await getCollection("logs");
const publishedLogs = allLogs.filter((log) => !log.data.draft);
const yearsWithLogs = [
  ...new Set(publishedLogs.map((log) => new Date(log.data.date).getFullYear())),
].sort((a, b) => b - a);

const ogImage = `/logs/og.png`;
---

<Layout title="Logs" ogImage={ogImage}>
  <Navigation selected="logs" />
  <main>
    <h1 class="page-title">Logs</h1>

    <div class="toc">
      {
        page.data.map(async (log: any) => {
          const date = new Date(log.data.date);
          const rawContent = log.body || "";
          const preview = getContentPreview(rawContent, 200);

          return (
            <article class="entry">
              <time class="entry-date">
                <a href={`/logs/${log.id}`} class="date-day">
                  {date.getDate()}
                </a>
                <a
                  href={`/logs/${date.getFullYear()}/${String(date.getMonth() + 1).padStart(2, "0")}`}
                  class="date-month"
                >
                  {date.toLocaleDateString("en-US", { month: "short" })}
                </a>
                <a href={`/logs/${date.getFullYear()}`} class="date-year">
                  {date.getFullYear()}
                </a>
              </time>
              <div class="entry-content">
                <div class="content-with-arrow">
                  <p>{preview}</p>
                  <a href={`/logs/${log.id}`} class="read-more" aria-label="Read full log">
                    <Icon name="ph:arrow-right" class="arrow-icon" />
                  </a>
                </div>
                <div class="entry-footer">
                  <div class="tags">
                    {log.data.tags && log.data.tags.length > 0 && 
                      log.data.tags.map((tag: string) => (
                        <Tag tag={tag} />
                      ))
                    }
                  </div>
                </div>
              </div>
            </article>
          );
        })
      }
    </div>

    {
      page.lastPage > 1 && (
        <div class="pagination-bottom">
          <Pagination
            currentPage={page.currentPage}
            lastPage={page.lastPage}
            prevUrl={page.url.prev}
            nextUrl={page.url.next}
            baseUrl="/logs"
          />
        </div>
      )
    }

    <YearNavigation years={yearsWithLogs} baseUrl="/logs" />
  </main>
</Layout>

<style>
  /* Reuse base.css styles as much as possible */

  .subtitle {
    text-align: center;
    color: var(--color-ink-light);
    font-style: italic;
    margin-bottom: var(--spacing-xl);
    padding-bottom: var(--spacing-md);
    border-bottom: 1px solid var(--color-border);
  }

  /* Override toc article grid to be simpler for logs */
  .toc article {
    display: flex;
    gap: var(--spacing-md);
    padding: var(--spacing-md);
    background: var(--color-bg-code);
    border-radius: 0.5rem;
    margin-bottom: var(--spacing-md);
  }

  .entry-content {
    flex: 1;
  }

  .toc time {
    font-family: var(--font-mono);
  }

  .entry-date {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    line-height: 1.2;
  }

  .entry-date a {
    color: var(--color-ink-light);
    text-decoration: none;
    display: block;
  }

  .entry-date a:hover {
    color: var(--color-accent);
    text-decoration: underline;
  }

  .date-day {
    font-size: var(--text-lg);
    font-weight: 600;
    color: var(--color-ink) !important;
  }

  .date-month {
    font-size: var(--text-sm);
  }

  .date-year {
    font-size: var(--text-xs);
  }

  .toc p {
    margin: 0 0 var(--spacing-sm);
    font-size: var(--text-base);
    line-height: 1.5;
    color: var(--color-ink);
  }

  .entry-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-md);
  }


  .tags {
    display: flex;
    gap: var(--spacing-sm);
    flex-wrap: wrap;
  }

  .content-with-arrow {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-md);
  }

  .content-with-arrow p {
    flex: 1;
  }

  .read-more {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-ink-light);
    text-decoration: none;
    padding: 0.25rem;
    transition: color 0.2s ease, transform 0.2s ease;
  }

  .read-more:hover {
    color: var(--color-accent);
    transform: translateX(2px);
  }

  .arrow-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .pagination-bottom {
    margin-top: var(--spacing-xl);
  }


  @media (max-width: 640px) {
    .toc article {
      flex-direction: column;
      gap: var(--spacing-sm);
    }

    .entry-footer {
      flex-wrap: wrap;
    }
  }
</style>
