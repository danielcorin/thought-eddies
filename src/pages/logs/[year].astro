---
import Navigation from "@components/layout/Navigation.astro";
import Tag from "@components/Tag.astro";
import Layout from "@layouts/Layout.astro";
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  const logs = await getCollection("logs");
  const years = [
    ...new Set(logs.map((log) => new Date(log.data.date).getFullYear())),
  ];

  return years.map((year) => ({
    params: { year: year.toString() },
    props: { year },
  }));
}

const { year } = Astro.params;
const logs = await getCollection("logs");

const yearLogs = logs
  .filter((log) => new Date(log.data.date).getFullYear().toString() === year)
  .sort(
    (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
  );

// Get all years with logs for navigation
const yearsWithLogs = [...new Set(logs.map((log) => new Date(log.data.date).getFullYear()))].sort((a, b) => b - a);
const currentYearIndex = yearsWithLogs.indexOf(parseInt(year));
const prevYear = currentYearIndex < yearsWithLogs.length - 1 ? yearsWithLogs[currentYearIndex + 1] : null;
const nextYear = currentYearIndex > 0 ? yearsWithLogs[currentYearIndex - 1] : null;

// Group logs by month
const logsByMonth = yearLogs.reduce(
  (acc, log) => {
    const month = new Date(log.data.date).getMonth();
    if (!acc[month]) {
      acc[month] = [];
    }
    acc[month].push(log);
    return acc;
  },
  {} as Record<number, typeof logs>,
);

const monthNames = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

// Create data for all 12 months
const monthsData = monthNames.map((monthName, index) => {
  const monthLogs = logsByMonth[index] || [];
  const tags = monthLogs.flatMap(log => log.data.tags || []);
  const tagCounts = tags.reduce((acc, tag) => {
    acc[tag] = (acc[tag] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  const topTags = Object.entries(tagCounts)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 3)
    .map(([tag]) => tag);

  return {
    name: monthName,
    index,
    count: monthLogs.length,
    tags: topTags,
    hasLogs: monthLogs.length > 0
  };
});

const ogImage = `/logs/og.png`;
---

<Layout title={`Logs from ${year}`} ogImage={ogImage}>
  <Navigation selected="logs" />
  <main>
    <nav class="breadcrumb">
      <a href="/logs">Logs</a>
      <span class="separator">/</span>
      <span class="current">{year}</span>
    </nav>
    
    <header class="page-header">
      <h1 class="page-title">{year}</h1>
      <p class="entry-count">{yearLogs.length} total entries</p>
    </header>

    <nav class="year-navigation">
      <div class="nav-item nav-prev-wrapper">
        {prevYear && (
          <a href={`/logs/${prevYear}`} class="nav-prev">
            <Icon name="ph:arrow-left" />
            <span>{prevYear}</span>
          </a>
        )}
      </div>
      <div class="current-year">{year}</div>
      <div class="nav-item nav-next-wrapper">
        {nextYear && (
          <a href={`/logs/${nextYear}`} class="nav-next">
            <span>{nextYear}</span>
            <Icon name="ph:arrow-right" />
          </a>
        )}
      </div>
    </nav>

    <div class="months-grid">
      {monthsData.map((month) => (
        <div class={`month-card ${!month.hasLogs ? 'empty' : ''}`}>
          {month.hasLogs ? (
            <a href={`/logs/${year}/${String(month.index + 1).padStart(2, "0")}`} class="month-link">
              <h2>{month.name}</h2>
              <p class="entry-count">{month.count} {month.count === 1 ? 'entry' : 'entries'}</p>
              {month.tags.length > 0 && (
                <div class="tags">
                  {month.tags.map(tag => (
                    <Tag tag={tag} onClick="event.stopPropagation()" />
                  ))}
                </div>
              )}
            </a>
          ) : (
            <div class="month-empty">
              <h2>{month.name}</h2>
              <p class="no-entries">No entries</p>
            </div>
          )}
        </div>
      ))}
    </div>
  </main>
</Layout>

<style>
  .breadcrumb {
    font-size: var(--text-sm);
    margin-bottom: var(--spacing-md);
    color: var(--color-ink-light);
    font-family: var(--font-mono);
  }

  .breadcrumb a {
    color: var(--color-ink-light);
  }

  .breadcrumb a:hover {
    text-decoration: underline;
    text-decoration-style: dotted;
  }

  .breadcrumb .separator {
    margin: 0 0.5rem;
    color: var(--color-border);
  }

  .breadcrumb .current {
    color: var(--color-ink);
    font-weight: 500;
  }

  .page-header {
    text-align: center;
    margin-bottom: var(--spacing-xl);
  }

  .page-header h1 {
    margin-bottom: var(--spacing-sm);
  }

  .entry-count {
    color: var(--color-ink-light);
    font-size: var(--text-sm);
    margin: 0;
  }

  .year-navigation {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    align-items: center;
    margin-bottom: var(--spacing-lg);
    padding: var(--spacing-md);
    background: var(--color-bg-code);
    border-radius: 0.5rem;
  }

  .nav-item {
    display: flex;
  }

  .nav-prev-wrapper {
    justify-content: flex-start;
  }

  .nav-next-wrapper {
    justify-content: flex-end;
  }

  .nav-prev,
  .nav-next {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: var(--text-sm);
    font-family: var(--font-mono);
  }

  .nav-prev svg,
  .nav-next svg {
    width: 1rem;
    height: 1rem;
  }

  .current-year {
    text-align: center;
    font-size: var(--text-sm);
    font-family: var(--font-mono);
  }

  .months-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-md);
  }

  .month-card {
    background: var(--color-bg-code);
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .month-card.empty {
    opacity: 0.5;
  }

  .month-link {
    display: block;
    padding: var(--spacing-lg);
    height: 100%;
  }

  .month-empty {
    padding: var(--spacing-lg);
  }

  .month-card h2 {
    font-size: var(--text-xl);
    margin-bottom: var(--spacing-sm);
  }

  .no-entries {
    font-size: var(--text-sm);
    color: var(--color-ink-light);
  }

  .no-entries {
    font-style: italic;
  }

  .tags {
    display: flex;
    gap: var(--spacing-sm);
    flex-wrap: wrap;
    margin-top: var(--spacing-sm);
  }

  @media (max-width: 768px) {
    .months-grid {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    }
  }
</style>

<script>
  // Add keyboard navigation support
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      const prevLink = document.querySelector('.nav-prev') as HTMLAnchorElement;
      if (prevLink) {
        prevLink.click();
      }
    } else if (e.key === 'ArrowRight') {
      const nextLink = document.querySelector('.nav-next') as HTMLAnchorElement;
      if (nextLink) {
        nextLink.click();
      }
    }
  });
</script>