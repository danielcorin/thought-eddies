---
import Navigation from "@components/layout/Navigation.astro";
import Layout from "@layouts/Layout.astro";
---

<Layout title="404: Not Found">
    <Navigation />
    <div id="tsparticles"></div>
    <main>
        <div class="content text-center">
            <h1 class="page-title">Page Not Found</h1>
            <p>
                ðŸ¤” <code class="inline-code">{Astro.url.pathname}</code>
            </p>
            <p>This page doesn't exist</p>
            <p>
                Return to the <a href="/">homepage</a>, try the <a href="/search">search</a>, or <a
                    href="mailto:dan@wvlen.llc">reach out</a
                > if you believe there's a broken link.
            </p>
        </div>
    </main>
</Layout>

<script>
    import { loadFull } from "tsparticles";
    import { tsParticles } from "tsparticles-engine";

    const baseOptions = {
        background: {},
        fullScreen: {
            zIndex: -1,
        },
        particles: {
            number: {
                value: Math.round(
                    ((window.innerWidth * window.innerHeight) / (1512 * 982)) *
                        200,
                ),
            },
            move: {
                enable: true,
                speed: 2,
                direction: "none",
                random: false,
                straight: false,
                outModes: "out",
                attract: {
                    enable: false,
                },
            },
            size: {
                value: 1,
                animation: {
                    enable: true,
                    speed: 2,
                    minimumValue: 0.1,
                    sync: false,
                },
            },
            opacity: {
                value: 0.5,
            },
            links: {
                enable: true,
                distance: 75,
                opacity: 0.4,
                width: 1,
            },
            interactivity: {
                events: {
                    onHover: {
                        enable: true,
                        mode: "grab",
                    },
                    onClick: {
                        enable: true,
                        mode: "push",
                    },
                },
                modes: {
                    grab: {
                        distance: 200,
                        links: {
                            opacity: 1,
                        },
                    },
                    push: {
                        quantity: 8,
                    },
                    repulse: {
                        distance: 100,
                        duration: 0.4,
                    },
                },
            },
        },
    };

    function getParticlesConfig() {
        const isDark = document.documentElement.classList.contains("dark");
        const rootStyles = getComputedStyle(document.documentElement);
        const inkColor = rootStyles.getPropertyValue("--color-ink").trim();

        return {
            ...baseOptions,
            particles: {
                ...baseOptions.particles,
                color: {
                    value: inkColor,
                },
                opacity: {
                    value: isDark ? 0.5 : 0.8,
                },
                links: {
                    ...baseOptions.particles.links,
                    opacity: isDark ? 0.4 : 0.6,
                    color: {
                        value: inkColor,
                        animation: {
                            enable: true,
                            speed: 30,
                            sync: false,
                        },
                    },
                },
            },
        };
    }

    let particlesInstance: any = null;

    async function initializeParticles() {
        await loadFull(tsParticles);
        particlesInstance = await tsParticles.load(
            "tsparticles",
            getParticlesConfig() as any,
        );
    }

    // Initial load
    if (document.readyState === "complete") {
        initializeParticles();
    } else {
        window.addEventListener("DOMContentLoaded", initializeParticles);
    }

    // Theme change handlers
    async function recreateParticles() {
        if (particlesInstance) {
            // Completely destroy current instance
            await particlesInstance.destroy();
            particlesInstance = null;
        }

        // Recreate with new theme
        await loadFull(tsParticles);
        particlesInstance = await tsParticles.load(
            "tsparticles",
            getParticlesConfig() as any,
        );
    }

    // Listen for custom theme change event
    window.addEventListener("themeChanged", recreateParticles);

    // Also listen to system preference changes
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    mediaQuery.addEventListener("change", recreateParticles);
</script>
