---
import Navigation from "@components/layout/Navigation.astro";
import PostCard from "@components/PostCard.astro";
import Layout from "@layouts/Layout.astro";
import { Icon } from "astro-icon/components";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";

export const getStaticPaths: GetStaticPaths = async () => {
  // Get all posts, logs, and tils
  const posts = await getCollection("posts");
  const logs = await getCollection("logs");
  const tils = await getCollection("til");
  
  // Extract all unique tags
  const allTags = new Set<string>();
  
  [...posts, ...logs, ...tils].forEach(item => {
    if (item.data.tags && Array.isArray(item.data.tags)) {
      item.data.tags.forEach(tag => allTags.add(tag));
    }
  });
  
  // Generate paths for each tag
  return Array.from(allTags).map(tag => ({
    params: { tag },
    props: { tag }
  }));
};

const { tag } = Astro.props;


// Get all content with this tag
const posts = await getCollection("posts");
const logs = await getCollection("logs");
const tils = await getCollection("til");

// Filter and combine content
const taggedPosts = posts
  .filter(post => !post.data.draft && post.data.tags?.includes(tag))
  .map(post => ({
    ...post,
    type: 'post' as const,
    date: post.data.createdAt
  }));

const taggedLogs = logs
  .filter(log => !log.data.draft && log.data.tags?.includes(tag))
  .map(log => ({
    ...log,
    type: 'log' as const,
    date: log.data.date
  }));

const taggedTils = tils
  .filter(til => !til.data.draft && til.data.tags?.includes(tag))
  .map(til => ({
    ...til,
    type: 'til' as const,
    date: til.data.createdAt,
    collection: 'til'
  }));

// Combine and sort by date
const allTaggedContent = [...taggedPosts, ...taggedLogs, ...taggedTils]
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

const ogImage = `/tags/og.png`;
---

<Layout title={`Tag: ${tag}`} ogImage={ogImage}>
  <Navigation />
  <main>
    <div class="page-header">
      <h1 class="page-title">Tag: <span class="tag-highlight">{tag}</span></h1>
      <p class="entry-count">{allTaggedContent.length} {allTaggedContent.length === 1 ? 'entry' : 'entries'}</p>
    </div>
    
    <nav class="breadcrumb">
      <a href="/tags">
        <Icon name="ph:arrow-left" />
        All tags
      </a>
    </nav>
    
    <div class="toc">
      {allTaggedContent.map(item => (
        <PostCard post={item} type={item.type} showTypeLabel={true} />
      ))}
    </div>
  </main>
</Layout>

<style>
  .page-header {
    text-align: center;
    margin-bottom: var(--spacing-xl);
  }

  .page-header h1 {
    margin-bottom: var(--spacing-sm);
  }

  .page-title {
    font-size: var(--text-3xl);
  }
  
  .tag-highlight {
    color: var(--color-accent);
    font-weight: 600;
  }
  
  .entry-count {
    color: var(--color-ink-light);
    font-size: var(--text-sm);
    margin: 0;
  }
  
  .toc {
    display: grid;
    gap: var(--spacing-lg);
  }
  
  
  .breadcrumb {
    margin-bottom: var(--spacing-xl);
  }
  
  .breadcrumb a {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--color-accent);
    text-decoration: none;
    font-size: var(--text-sm);
  }
  
  .breadcrumb a svg {
    width: 1rem;
    height: 1rem;
  }
  
  .breadcrumb a:hover {
    text-decoration: underline;
  }
</style>