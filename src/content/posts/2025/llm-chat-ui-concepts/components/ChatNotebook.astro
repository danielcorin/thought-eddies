---
import { Markdown } from "@astropub/md";

interface ContentItem {
    type: "text" | "image_url";
    text?: string;
    image_url?: {
        url: string;
    };
}

interface Message {
    role: "system" | "user" | "assistant" | "function";
    content: string | ContentItem[];
    name?: string;
    function_call?: {
        name: string;
        arguments: string;
    };
}

interface Props {
    messages: Message[];
    model?: string;
}

const { messages, model } = Astro.props;

function getContent(content: string | ContentItem[]): {
    text: string;
    images: string[];
} {
    if (typeof content === "string") return { text: content, images: [] };

    const images: string[] = [];
    const text = content
        .map((item) => {
            if (item.type === "image_url" && item.image_url) {
                images.push(item.image_url.url);
                return "";
            }
            return item.text || "";
        })
        .join("");

    return { text, images };
}

// Generate timestamps for demonstration purposes
function generateTimestamp(index: number) {
    const now = new Date();
    const minutesAgo = (messages.length - index) * 3;
    now.setMinutes(now.getMinutes() - minutesAgo);
    return now.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
}

// Extract code blocks for highlighting
function extractCodeBlocks(text: string) {
    const codeBlockRegex = /```(\w*)\n([\s\S]*?)```/g;
    let match;
    let lastIndex = 0;
    const segments = [];

    while ((match = codeBlockRegex.exec(text)) !== null) {
        // Add text before code block
        if (match.index > lastIndex) {
            segments.push({
                type: "text",
                content: text.substring(lastIndex, match.index),
            });
        }

        // Add code block
        segments.push({
            type: "code",
            language: match[1] || "plaintext",
            content: match[2],
        });

        lastIndex = match.index + match[0].length;
    }

    // Add remaining text after last code block
    if (lastIndex < text.length) {
        segments.push({
            type: "text",
            content: text.substring(lastIndex),
        });
    }

    return segments.length > 0 ? segments : [{ type: "text", content: text }];
}
---

<section class="notebook-section">
    <div class="notebook-container">
        <div class="notebook-header">
            <div class="kernel-info">
                <span class="kernel-badge">{model || "Assistant"}</span>
                <span class="kernel-status">● Active</span>
            </div>
            <div class="notebook-controls">
                <button class="notebook-button" title="Run All"
                    >▶ Run All</button
                >
                <button class="notebook-button" title="Clear Output"
                    >⟲ Clear</button
                >
            </div>
        </div>

        <div class="notebook-cells">
            {
                messages.map((message, index) => {
                    const content = getContent(message.content);
                    const timestamp = generateTimestamp(index);
                    const segments = extractCodeBlocks(content.text);

                    return (
                        <div class={`notebook-cell ${message.role}-cell`}>
                            {message.role === "user" && (
                                <div class="cell-container input-container">
                                    <div class="cell-indicator">
                                        <div class="execution-count">
                                            In [{index + 1}]:
                                        </div>
                                        <div class="timestamp">{timestamp}</div>
                                    </div>
                                    <div class="cell-content">
                                        <div class="cell-input">
                                            <div class="line-numbers">
                                                {Array.from({
                                                    length: content.text.split(
                                                        "\n",
                                                    ).length,
                                                }).map((_, i) => (
                                                    <div class="line-number">
                                                        {i + 1}
                                                    </div>
                                                ))}
                                            </div>
                                            <pre class="input-code">
                                                {content.text}
                                            </pre>
                                            {content.images.map((url) => (
                                                <img
                                                    src={url}
                                                    alt=""
                                                    class="cell-image"
                                                />
                                            ))}
                                        </div>
                                        <div class="cell-toolbar">
                                            <button
                                                class="cell-button run-button"
                                                title="Run Cell"
                                            >
                                                ▶
                                            </button>
                                            <button
                                                class="cell-button copy-button"
                                                title="Copy"
                                            >
                                                ⧉
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            )}

                            {message.role === "assistant" && (
                                <div class="cell-container output-container">
                                    <div class="cell-indicator">
                                        <div class="execution-count">
                                            Out[{index}]:
                                        </div>
                                        <div class="timestamp">{timestamp}</div>
                                    </div>
                                    <div class="cell-content">
                                        <div class="cell-output">
                                            {segments.map((segment) =>
                                                segment.type === "text" ? (
                                                    <div class="output-text">
                                                        <Markdown
                                                            of={segment.content}
                                                        />
                                                    </div>
                                                ) : (
                                                    <div class="output-code-block">
                                                        <div class="code-header">
                                                            <span class="code-language">
                                                                {
                                                                    segment.language
                                                                }
                                                            </span>
                                                            <button
                                                                class="code-copy-button"
                                                                title="Copy Code"
                                                            >
                                                                ⧉
                                                            </button>
                                                        </div>
                                                        <pre
                                                            class={`language-${segment.language}`}
                                                        >
                                                            <code>
                                                                {
                                                                    segment.content
                                                                }
                                                            </code>
                                                        </pre>
                                                    </div>
                                                ),
                                            )}
                                            {content.images.map((url) => (
                                                <img
                                                    src={url}
                                                    alt=""
                                                    class="cell-image"
                                                />
                                            ))}
                                        </div>
                                    </div>
                                </div>
                            )}

                            {message.role === "system" && (
                                <div class="cell-container system-container">
                                    <div class="cell-content">
                                        <div class="system-message">
                                            <div class="system-header">
                                                SYSTEM
                                            </div>
                                            <div class="system-content">
                                                <Markdown of={content.text} />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    );
                })
            }
        </div>
    </div>
</section>

<style>
    .notebook-section {
        --transition-speed: 300ms;
        --cell-spacing: 1rem;
        --border-color: var(--color-border);
        --input-bg: var(--color-bg-code);
        --output-bg: var(--color-bg);
        --system-bg: color-mix(
            in srgb,
            var(--color-border) 30%,
            var(--color-bg) 70%
        );
        font-family: var(--font-mono);
    }

    .notebook-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .notebook-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 1rem;
        background: var(--color-bg-code);
        border-bottom: 1px solid var(--border-color);
    }

    .kernel-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .kernel-badge {
        padding: 0.25rem 0.5rem;
        background: var(--color-link);
        color: var(--color-bg);
        border-radius: 0.25rem;
        font-size: var(--text-xs);
        font-weight: 500;
    }

    .kernel-status {
        display: flex;
        align-items: center;
        font-size: var(--text-xs);
        color: var(--color-link);
    }

    .notebook-controls {
        display: flex;
        gap: 0.5rem;
    }

    .notebook-button {
        padding: 0.25rem 0.5rem;
        background: transparent;
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        font-size: var(--text-xs);
        color: var(--color-ink);
        cursor: pointer;
        transition: background var(--transition-speed);
    }

    .notebook-button:hover {
        background: color-mix(
            in srgb,
            var(--color-border) 20%,
            transparent 80%
        );
    }

    .notebook-cells {
        display: flex;
        flex-direction: column;
    }

    .notebook-cell {
        border-bottom: 1px solid var(--border-color);
    }

    .notebook-cell:last-child {
        border-bottom: none;
    }

    .cell-container {
        display: flex;
        width: 100%;
    }

    .cell-indicator {
        width: 100px;
        flex-shrink: 0;
        padding: 0.75rem 0.5rem;
        text-align: right;
        font-size: var(--text-xs);
        border-right: 1px solid var(--border-color);
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .execution-count {
        font-weight: 500;
        color: var(--color-ink-light);
    }

    .timestamp {
        font-size: 0.65rem;
        color: var(--color-ink-lighter);
    }

    .cell-content {
        flex: 1;
        display: flex;
        position: relative;
    }

    .input-container .cell-indicator,
    .input-container .cell-content {
        background: var(--input-bg);
    }

    .output-container .cell-indicator,
    .output-container .cell-content {
        background: var(--output-bg);
    }

    .cell-input,
    .cell-output {
        flex: 1;
        padding: 0.75rem 1rem;
        font-size: var(--text-sm);
        position: relative;
    }

    .cell-input {
        display: flex;
    }

    .line-numbers {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        margin-right: 0.75rem;
        padding-right: 0.5rem;
        color: var(--color-ink-lighter);
        font-size: var(--text-xs);
        border-right: 1px solid var(--border-color);
        user-select: none;
    }

    .input-code {
        flex: 1;
        margin: 0;
        white-space: pre-wrap;
        color: var(--color-ink);
        font-family: var(--font-mono);
        line-height: 1.5;
        padding-left: 0;
        text-align: left;
        overflow-wrap: break-word;
        word-break: normal;
    }

    .output-text {
        font-family: var(--font-prose);
    }

    .output-code-block {
        margin: 1rem 0;
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        overflow: hidden;
    }

    .code-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.25rem 0.5rem;
        background: var(--color-bg-code);
        border-bottom: 1px solid var(--border-color);
        font-size: var(--text-xs);
    }

    .code-language {
        color: var(--color-ink-light);
        font-weight: 500;
    }

    .code-copy-button {
        background: transparent;
        border: none;
        color: var(--color-ink-light);
        cursor: pointer;
        padding: 0.15rem 0.25rem;
        border-radius: 0.15rem;
        transition: background var(--transition-speed);
    }

    .code-copy-button:hover {
        background: color-mix(
            in srgb,
            var(--color-border) 20%,
            transparent 80%
        );
    }

    .output-code-block pre {
        margin: 0;
        padding: 0.75rem 1rem;
        background: var(--input-bg);
        overflow-x: auto;
    }

    .cell-toolbar {
        position: absolute;
        right: 0.5rem;
        top: 0.5rem;
        display: flex;
        gap: 0.25rem;
        opacity: 0;
        transition: opacity var(--transition-speed);
    }

    .cell-container:hover .cell-toolbar {
        opacity: 1;
    }

    .cell-button {
        background: transparent;
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        width: 1.5rem;
        height: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--color-ink-light);
        cursor: pointer;
        transition: background var(--transition-speed);
    }

    .cell-button:hover {
        background: color-mix(
            in srgb,
            var(--color-border) 20%,
            transparent 80%
        );
    }

    .system-container {
        background: var(--system-bg);
        padding: 0.5rem 1rem;
    }

    .system-message {
        flex: 1;
        font-style: italic;
        color: var(--color-ink-light);
        font-size: var(--text-xs);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .system-header {
        font-weight: 600;
        padding: 0.15rem 0.3rem;
        background: color-mix(
            in srgb,
            var(--color-ink-light) 20%,
            transparent 80%
        );
        border-radius: 0.15rem;
    }

    .cell-image {
        margin-top: 0.75rem;
        max-width: 100%;
        max-height: 300px;
        object-fit: contain;
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
    }

    /* Mobile adjustments */
    @media (max-width: 640px) {
        .cell-container {
            flex-direction: column;
        }

        .cell-indicator {
            width: 100%;
            padding: 0.25rem 0.5rem;
            flex-direction: row;
            justify-content: space-between;
            border-right: none;
            border-bottom: 1px solid var(--border-color);
        }

        .execution-count {
            text-align: left;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Add functionality for copy buttons
        document
            .querySelectorAll(".copy-button, .code-copy-button")
            .forEach((button) => {
                button.addEventListener("click", (e) => {
                    const target = e.target as HTMLElement;
                    let contentToCopy = "";

                    if (target.classList.contains("copy-button")) {
                        // Copy entire cell content
                        const cellContent = target.closest(".cell-content");
                        if (cellContent) {
                            const inputCode =
                                cellContent.querySelector(".input-code");
                            if (inputCode) {
                                contentToCopy = inputCode.textContent || "";
                            }
                        }
                    } else if (target.classList.contains("code-copy-button")) {
                        // Copy just the code block
                        const codeBlock = target.closest(".output-code-block");
                        if (codeBlock) {
                            const codeElement = codeBlock.querySelector("code");
                            if (codeElement) {
                                contentToCopy = codeElement.textContent || "";
                            }
                        }
                    }

                    if (contentToCopy) {
                        navigator.clipboard
                            .writeText(contentToCopy)
                            .then(() => {
                                const originalText = target.textContent;
                                target.textContent = "✓";
                                setTimeout(() => {
                                    target.textContent = originalText;
                                }, 2000);
                            });
                    }
                });
            });

        // Add functionality for run buttons (simulation)
        document
            .querySelectorAll(".run-button, .notebook-button")
            .forEach((button) => {
                button.addEventListener("click", () => {
                    const title = button.getAttribute("title") || "";
                    if (title.includes("Run")) {
                        button.textContent = "⏳";
                        setTimeout(() => {
                            button.textContent = title.includes("All")
                                ? "▶ Run All"
                                : "▶";
                        }, 1000);
                    }
                });
            });
    });
</script>
