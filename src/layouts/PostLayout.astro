---
import Navigation from "@components/layout/Navigation.astro";
import RecommendedPosts from "@components/RecommendedPosts.astro";
import Tag from "@components/Tag.astro";
import { findSimilarPosts } from "@utils/findSimilarPosts";
import { Icon } from "astro-icon/components";
import { getCollection, getEntry } from "astro:content";
import Layout from "./Layout.astro";

const { frontmatter, ogImage, slug } = Astro.props;

// Determine collection type
const collectionType = frontmatter.collection || "posts";
const isTil = collectionType === "til";
const isProject = collectionType === "projects";

// Get the current entry using the slug
const entryId = slug.replace(/\.(md|mdx)$/, '');
const currentEntry = await getEntry(collectionType, entryId);

// Get all posts/tils to find prev/next
const allEntries = await getCollection(collectionType);
const sortedEntries = allEntries
  .filter((entry) => !entry.data.draft)
  .sort(
    (a, b) =>
      new Date(b.data.createdAt).getTime() -
      new Date(a.data.createdAt).getTime(),
  );

// Find current entry index using the ID instead of title
const currentIndex = sortedEntries.findIndex(
  (entry) => entry.id === currentEntry?.id,
);

const prevEntry =
  currentIndex < sortedEntries.length - 1 ? sortedEntries[currentIndex + 1] : null;
const nextEntry = currentIndex > 0 ? sortedEntries[currentIndex - 1] : null;

// Find similar entries, excluding prev and next
const excludeEntries = [prevEntry, nextEntry].filter(Boolean) as typeof sortedEntries;
const similarEntries = currentEntry
  ? findSimilarPosts(currentEntry, sortedEntries, 3, excludeEntries)
  : [];
---

<Layout title={frontmatter.title} ogImage={ogImage}>
  <Navigation selected={isProject ? "projects" : isTil ? "til" : "posts"} />
  <article>
    <header>
      <h1>{frontmatter.title}</h1>
      <div class="metadata">
        <time datetime={frontmatter.createdAt}>
          <span class="icon-text-wrapper">
            <Icon name="ph:pencil-simple-line" class="inline-icon meta-icon" />
            {new Date(frontmatter.createdAt).toISOString().split("T")[0]}
          </span>
          {
            frontmatter.updatedAt &&
              new Date(frontmatter.updatedAt).toISOString() !==
                new Date(frontmatter.createdAt).toISOString() && (
                <span class="icon-text-wrapper">
                  <Icon
                    name="ph:clock-clockwise"
                    class="inline-icon meta-icon"
                  />
                  {new Date(frontmatter.updatedAt).toISOString().split("T")[0]}
                </span>
              )
          }
        </time>
        {
          frontmatter.location && (
            <span class="icon-text-wrapper location">
              <Icon name="ph:map-pin" class="inline-icon meta-icon" />
              <span class="location-text">{frontmatter.location}</span>
            </span>
          )
        }
        {
          frontmatter.githubUrl && (
            <span class="icon-text-wrapper github-link">
              <a
                href={frontmatter.githubUrl}
                target="_blank"
                rel="noopener noreferrer"
              >
                <Icon name="ph:github-logo" class="inline-icon meta-icon" />
                <span class="github-text">On GitHub</span>
              </a>
            </span>
          )
        }
        {
          frontmatter.projectUrl && (
            <span class="icon-text-wrapper project-link">
              <a
                href={frontmatter.projectUrl}
                target="_blank"
                rel="noopener noreferrer"
              >
                <Icon name="ph:link" class="inline-icon meta-icon" />
                <span class="project-text">Project</span>
              </a>
            </span>
          )
        }
        {
          frontmatter.category && isTil && (
            <span class="icon-text-wrapper category">
              <Icon name="ph:folder" class="inline-icon meta-icon" />
              <a href={`/til/${frontmatter.category}`} class="category-link">
                {frontmatter.category}
              </a>
            </span>
          )
        }
      </div>
      {
        frontmatter.tags && frontmatter.tags.length > 0 && (
          <div class="tags">
            {frontmatter.tags.map((tag: string) => (
              <Tag tag={tag} />
            ))}
          </div>
        )
      }
    </header>
    <div class="content">
      <slot />
    </div>

    <div class="raw-link">
      <a href={
        isTil
          ? `/til/${slug.replace(/\.(md|mdx)$/, '')}/index.md`
          : isProject
          ? `/projects/${slug.replace(/\.(md|mdx)$/, '')}/index.md`
          : `/posts/${slug.replace(/\.(md|mdx)$/, '')}/index.md`
      } class="raw-button">
        <Icon name="ph:code" />
        <span>raw</span>
      </a>
      <a href={`https://github.com/danielcorin/thought-eddies/edit/main/${currentEntry?.filePath || `src/content/${collectionType}/${slug}`}`} target="_blank" rel="noopener noreferrer" class="edit-button">
        <Icon name="ph:pencil-simple" />
        <span>edit</span>
      </a>
    </div>

    {!isTil && <RecommendedPosts posts={similarEntries} />}

    <nav class="post-navigation">
      <div class="nav-item nav-prev-wrapper">
        {
          prevEntry && (
            <a href={
              isTil ? `/til/${prevEntry.id.split('/')[0]}/${prevEntry.id.split('/').slice(1).join('/').replace(/\.(md|mdx)$/, '')}` :
              isProject ? `/projects/${prevEntry.id}` :
              `/posts/${prevEntry.id}`
            } class="nav-prev">
              <Icon name="ph:arrow-left" />
              <div class="nav-content">
                <span class="nav-label">Previous</span>
                <span class="nav-title">{prevEntry.data.title}</span>
              </div>
            </a>
          )
        }
      </div>
      <div class="nav-item nav-next-wrapper">
        {
          nextEntry && (
            <a href={
              isTil ? `/til/${nextEntry.id.split('/')[0]}/${nextEntry.id.split('/').slice(1).join('/').replace(/\.(md|mdx)$/, '')}` :
              isProject ? `/projects/${nextEntry.id}` :
              `/posts/${nextEntry.id}`
            } class="nav-next">
              <div class="nav-content">
                <span class="nav-label">Next</span>
                <span class="nav-title">{nextEntry.data.title}</span>
              </div>
              <Icon name="ph:arrow-right" />
            </a>
          )
        }
      </div>
    </nav>
  </article>
</Layout>
<style>
  .metadata {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
  }

  .metadata time {
    display: inline-flex;
    align-items: center;
  }

  .icon-text-wrapper {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    margin-right: 1rem;
  }

  .meta-icon {
    opacity: 0.7;
  }

  .location-text {
    font-family: var(--font-mono);
  }

  .github-text {
    font-family: var(--font-mono);
  }

  .github-link a {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--color-ink-light);
    text-decoration: none;
    transition: opacity 0.2s;
  }

  .github-link a:hover {
    opacity: 0.8;
    color: var(--color-accent);
  }

  .project-text {
    font-family: var(--font-mono);
  }

  .project-link a {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--color-ink-light);
    text-decoration: none;
    transition: opacity 0.2s;
  }

  .project-link a:hover {
    opacity: 0.8;
    color: var(--color-accent);
  }

  @media (max-width: 640px) {
    .icon-text-wrapper {
      margin-right: 0.75rem;
    }
  }

  .post-navigation {
    display: flex;
    justify-content: space-between;
    align-items: stretch;
    margin-top: var(--spacing-xl);
    padding-top: var(--spacing-xl);
    border-top: 1px solid var(--color-border);
    gap: var(--spacing-lg);
  }

  .nav-item {
    flex: 1;
    display: flex;
  }

  .nav-prev-wrapper {
    justify-content: flex-start;
  }

  .nav-next-wrapper {
    justify-content: flex-end;
  }

  .nav-prev,
  .nav-next {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-md) var(--spacing-lg);
    padding-left: 3rem;
    padding-right: 3rem;
    background: var(--color-bg-code);
    border-radius: 0.5rem;
    text-decoration: none;
    transition: background 0.2s;
    max-width: 320px;
    position: relative;
  }

  .nav-prev:hover,
  .nav-next:hover {
    background: var(--color-bg-hover);
  }

  .nav-prev svg,
  .nav-next svg {
    width: 1.5rem;
    height: 1.5rem;
    flex-shrink: 0;
    color: var(--color-ink-light);
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }

  .nav-prev svg {
    left: var(--spacing-md);
  }

  .nav-next svg {
    right: var(--spacing-md);
  }

  .nav-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    text-align: center;
  }

  .nav-label {
    font-size: var(--text-sm);
    color: var(--color-ink-light);
    font-family: var(--font-mono);
  }

  .nav-title {
    font-size: var(--text-base);
    color: var(--color-ink);
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  @media (max-width: 768px) {
    .post-navigation {
      flex-direction: column;
      gap: var(--spacing-md);
    }

    .nav-prev,
    .nav-next {
      width: 100%;
      max-width: 100%;
    }
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .category-link {
    color: var(--color-accent);
    text-decoration: none;
    font-family: var(--font-mono);
    transition: opacity 0.2s;
  }

  .category-link:hover {
    opacity: 0.8;
    text-decoration: underline;
  }

  .raw-link {
    display: flex;
    justify-content: flex-start;
    gap: 0.75rem;
    margin-top: var(--spacing-xl);
  }

  .raw-button,
  .edit-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--color-bg-code);
    color: var(--color-ink);
    text-decoration: none;
    border-radius: 0.25rem;
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    transition: background 0.2s, color 0.2s;
  }

  .raw-button:hover,
  .edit-button:hover {
    background: var(--color-bg-hover);
    color: var(--color-accent);
  }

  .raw-button svg,
  .edit-button svg {
    width: 1rem;
    height: 1rem;
  }
</style>

<script>
  // Add keyboard navigation support
  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") {
      const prevLink = document.querySelector(".nav-prev") as HTMLAnchorElement;
      if (prevLink) {
        prevLink.click();
      }
    } else if (e.key === "ArrowRight") {
      const nextLink = document.querySelector(".nav-next") as HTMLAnchorElement;
      if (nextLink) {
        nextLink.click();
      }
    }
  });
</script>
