---
import Navigation from "@components/layout/Navigation.astro";
import Tag from "@components/Tag.astro";
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";
import Layout from "./Layout.astro";
import Breadcrumbs from "@components/Breadcrumbs.astro";

const { frontmatter, ogImage, slug } = Astro.props;

// Get all logs to find prev/next
const allLogs = await getCollection("logs");
const sortedLogs = allLogs
  .filter((log) => !log.data.draft)
  .sort(
    (a, b) => new Date(a.data.date).getTime() - new Date(b.data.date).getTime(),
  );

// Find current log index
const currentLogDate = new Date(frontmatter.date).toISOString().split("T")[0];
const currentIndex = sortedLogs.findIndex(
  (log) =>
    new Date(log.data.date).toISOString().split("T")[0] === currentLogDate,
);

const prevLog = currentIndex > 0 ? sortedLogs[currentIndex - 1] : null;
const nextLog =
  currentIndex < sortedLogs.length - 1 ? sortedLogs[currentIndex + 1] : null;

// Find the current log object
const currentLog = sortedLogs[currentIndex];
---

<Layout title={frontmatter.title} ogImage={ogImage}>
  <Navigation selected="logs" />
  <main>
    <article>
      <Breadcrumbs items={[
        { label: "Logs", href: "/logs" },
        { label: String(new Date(frontmatter.date).getFullYear()), href: `/logs/${new Date(frontmatter.date).getFullYear()}` },
        { label: new Date(frontmatter.date).toLocaleDateString("en-US", { month: "long" }), href: `/logs/${new Date(frontmatter.date).getFullYear()}/${String(new Date(frontmatter.date).getMonth() + 1).padStart(2, "0")}` },
        { label: String(new Date(frontmatter.date).getDate()) }
      ]} />

      <nav class="day-navigation">
        <div class="nav-item nav-prev-wrapper">
          {
            prevLog && (
              <a href={`/logs/${prevLog.id}?ref=arrow_nav`} class="nav-prev">
                <Icon name="ph:arrow-left" />
                <span>
                  {new Date(prevLog.data.date).toLocaleDateString("en-US", {
                    month: "short",
                    day: "numeric",
                  })}
                </span>
              </a>
            )
          }
        </div>
        <time class="current-day">
          {
            new Date(frontmatter.date).toLocaleDateString("en-US", {
              weekday: "short",
              month: "short",
              day: "numeric",
              year: "numeric",
            })
          }
        </time>
        <div class="nav-item nav-next-wrapper">
          {
            nextLog && (
              <a href={`/logs/${nextLog.id}?ref=arrow_nav`} class="nav-next">
                <span>
                  {new Date(nextLog.data.date).toLocaleDateString("en-US", {
                    month: "short",
                    day: "numeric",
                  })}
                </span>
                <Icon name="ph:arrow-right" />
              </a>
            )
          }
        </div>
      </nav>

      {
        frontmatter.tags && frontmatter.tags.length > 0 && (
          <div class="tags">
            {frontmatter.tags.map((tag: string) => (
              <Tag tag={tag} />
            ))}
          </div>
        )
      }

      <div class="content">
        <slot />
      </div>

      <div class="raw-link">
        <a href={`/logs/${slug.replace(/\.(md|mdx)$/, '')}/index.md`} class="raw-button">
          <Icon name="ph:code" />
          <span>raw</span>
        </a>
        <a href={`https://github.com/danielcorin/thought-eddies/edit/main/${currentLog?.filePath || `src/content/logs/${slug}`}`} target="_blank" rel="noopener noreferrer" class="edit-button">
          <Icon name="ph:pencil-simple" />
          <span>edit</span>
        </a>
      </div>
    </article>
  </main>
</Layout>

<style>
  /* Use base.css main and article styles, only add log-specific styles */
  

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-lg);
  }

  .tag {
    font-size: var(--text-sm);
    color: var(--color-ink-light);
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 2px;
  }

  .day-navigation {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    align-items: center;
    margin: var(--spacing-lg) 0;
    padding: var(--spacing-md);
    background: var(--color-bg-code);
    border-radius: 0.5rem;
  }

  .nav-item {
    display: flex;
  }

  .nav-prev-wrapper {
    justify-content: flex-start;
  }

  .nav-next-wrapper {
    justify-content: flex-end;
  }

  .nav-prev,
  .nav-next {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: var(--text-sm);
    font-family: var(--font-mono);
  }

  .nav-prev svg,
  .nav-next svg {
    width: 1rem;
    height: 1rem;
  }

  .current-day {
    text-align: center;
    font-family: var(--font-mono);
    font-size: var(--text-sm);
  }

  @media (max-width: 768px) {
    .day-navigation {
      gap: var(--spacing-xs);
      padding: var(--spacing-sm);
    }

    .current-day {
      font-size: var(--text-xs);
    }

    .nav-prev,
    .nav-next {
      font-size: var(--text-xs);
    }
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  .raw-link {
    display: flex;
    justify-content: flex-start;
    gap: 0.75rem;
    margin-top: var(--spacing-xl);
  }

  .raw-button,
  .edit-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--color-bg-code);
    color: var(--color-ink);
    text-decoration: none;
    border-radius: 0.25rem;
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    transition: background 0.2s, color 0.2s;
  }

  .raw-button:hover,
  .edit-button:hover {
    background: var(--color-bg-hover);
    color: var(--color-accent);
  }

  .raw-button svg,
  .edit-button svg {
    width: 1rem;
    height: 1rem;
  }
</style>

<script>
  // Add keyboard navigation support
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      const prevLink = document.querySelector('.nav-prev') as HTMLAnchorElement;
      if (prevLink) {
        prevLink.click();
      }
    } else if (e.key === 'ArrowRight') {
      const nextLink = document.querySelector('.nav-next') as HTMLAnchorElement;
      if (nextLink) {
        nextLink.click();
      }
    }
  });
</script>